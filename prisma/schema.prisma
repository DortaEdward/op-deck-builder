generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Deck          Deck[]
    role          Role      @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Card {
    id           String   @id @default(cuid())
    name         String
    cardIndex    String
    set          Set      @relation(fields: [setId], references: [id])
    setId        String
    setNumber    String
    color        String
    cost         String?
    traits       String?
    power        String?
    counterPower String?
    life         String?
    artist       String?
    effect       String?
    image        String?
    cardType     CardType @relation(fields: [cardTypeId], references: [id])
    cardTypeId   String
    rarity       Rarity   @relation(fields: [rarityId], references: [id])
    rarityId     String
}

model Set {
    id        String  @id @default(cuid())
    name      String
    setNumber String  @unique
    image     String?
    Card      Card[]
}

model Deck {
    id          String  @id @default(cuid())
    name        String
    author      User    @relation(fields: [userId], references: [id])
    userId      String
    userImage   String?
    description String?
    leaderImage String?
    deck        Json
}

model CardType {
    id   String @id @default(cuid())
    name String
    Card Card[]
}

model Rarity {
    id   String @id @default(cuid())
    name String
    Card Card[]
}

enum Role {
    ADMIN
    USER
    MOD
}
