generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Deck          Deck[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Card {
    id           String   @id @default(cuid())
    cardIndex    Int
    set          Set      @relation(fields: [setId], references: [id])
    setId        String
    color        String
    cost         Int?
    name         String
    traits       String[]
    power        Int?
    counterPower Int?
    life         Int?
    artist       String?
    effect       String?
    image        String?
    Deck         Deck[]
}

model Set {
    id    String  @id @default(cuid())
    name  String
    setId String
    image String?
    Card  Card[]
}

model Deck {
    id     String @id @default(cuid())
    name   String
    author User   @relation(fields: [userId], references: [id])
    userId String
    userImage String?
    cards  Card   @relation(fields: [cardId], references: [id])
    cardId String
    description String?
    leaderImage String?
}